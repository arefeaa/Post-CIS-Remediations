---
##############################################################################################################################################
##  Date Created: June 7th, 2022
##  By: Aaron Arefe
##  This playbook was taken from the automatically generated playbook after an openscap scan created the '-arf.xml' file
##
##  The playbook below will check to see if the following; /dev/shm, /home, /tmp, /var/tmp mount points are seperate partions and if so,
##  the playbook will mount them with the appropriate modifiers.  Below is a quick command line way of doing it.
##
##  /dev/shm mount -o remount,noexec,nosuid,nodev
##  /home mount -o remount nodev
##  /tmp mount -o remount,noexec,nosuid,nodev
##  /var/tmp mount -o remount,noexec,nosuid,nodev
##############################################################################################################################################

##############################################################################################################################################
## 
## Section is for checking if /var/tmp is a seperate partion and if so, adding the 'noexec,nodev,nosuid' modifier to mount point
## /var/tmp
##
##############################################################################################################################################
vars:
  var_password_pam_remember: !!str 5
  var_password_pam_remember_control_flag: !!str required
  var_password_pam_minclass: !!str 4
  var_password_pam_retry: !!str 3
  var_accounts_user_umask: !!str 027

tasks:

  - name: Check information associated to mountpoint
    command: findmnt  '/dev/shm'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)

  - name: If /dev/shm not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /dev/shm
        - tmpfs
        - tmpfs
        - defaults
    when:
      - ("" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure noexec option is part of the to /dev/shm options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',noexec''
        }) }}'
    when:
      - mount_info is defined and "noexec" not in mount_info.options

  - name: Ensure /dev/shm is mounted with noexec option
    mount:
      path: /dev/shm
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("" | length == 0)

  - name: Check information associated to mountpoint
    command: findmnt --fstab '/home'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)


  ##############################################################################################################################################
  ## 
  ## Section is for checking if /home is a seperate partion and if so, adding the 'nodev' modifier to mount point
  ## /home
  ##
  ##############################################################################################################################################

  - name: If /home not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /home
        - ''
        - ''
        - defaults
    when:
      - ("--fstab" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure nodev option is part of the to /home options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',nodev''
        }) }}'
    when:
      - mount_info is defined and "nodev" not in mount_info.options

  - name: Ensure /home is mounted with nodev option
    mount:
      path: /home
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab" | length == 0)

  ##############################################################################################################################################
  ## 
  ## Section is for checking if /tmp is a seperate partion and if so, adding the 'noexec,nodev,nosuid' modifier to mount point
  ## /tmp
  ##
  ##############################################################################################################################################

  - name: Check information associated to mountpoint
    command: findmnt --fstab '/tmp'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)

  - name: If /tmp not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /tmp
        - ''
        - ''
        - defaults
    when:
      - ("--fstab" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure nodev option is part of the to /tmp options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',nodev''
        }) }}'
    when:
      - mount_info is defined and "nodev" not in mount_info.options

  - name: Ensure /tmp is mounted with nodev option
    mount:
      path: /tmp
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab" | length == 0)

  - name: Check information associated to mountpoint
    command: findmnt --fstab '/tmp'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)

  - name: If /tmp not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /tmp
        - ''
        - ''
        - defaults
    when:
      - ("--fstab" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure noexec option is part of the to /tmp options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',noexec''
        }) }}'
    when:
      - mount_info is defined and "noexec" not in mount_info.options

  - name: Ensure /tmp is mounted with noexec option
    mount:
      path: /tmp
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab" | length == 0)

  - name: Check information associated to mountpoint
    command: findmnt --fstab '/tmp'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)

  - name: If /tmp not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /tmp
        - ''
        - ''
        - defaults
    when:
      - ("--fstab" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure nosuid option is part of the to /tmp options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',nosuid''
        }) }}'
    when:
      - mount_info is defined and "nosuid" not in mount_info.options

  - name: Ensure /tmp is mounted with nosuid option
    mount:
      path: /tmp
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab" | length == 0)

  ##############################################################################################################################################
  ## 
  ## Section is for checking if /var/tmp is a seperate partion and if so, adding the 'noexec,nodev,nosuid' modifier to mount point
  ## /var/tmp
  ##
  ##############################################################################################################################################

  - name: Check information associated to mountpoint
    command: findmnt --fstab '/var/tmp'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)

  - name: If /var/tmp not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /var/tmp
        - ''
        - ''
        - defaults
    when:
      - ("--fstab" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure nodev option is part of the to /var/tmp options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',nodev''
        }) }}'
    when:
      - mount_info is defined and "nodev" not in mount_info.options

  - name: Ensure /var/tmp is mounted with nodev option
    mount:
      path: /var/tmp
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab" | length == 0)

  - name: Check information associated to mountpoint
    command: findmnt --fstab '/var/tmp'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)

  - name: If /var/tmp not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /var/tmp
        - ''
        - ''
        - defaults
    when:
      - ("--fstab" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure noexec option is part of the to /var/tmp options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',noexec''
        }) }}'
    when:
      - mount_info is defined and "noexec" not in mount_info.options

  - name: Ensure /var/tmp is mounted with noexec option
    mount:
      path: /var/tmp
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab" | length == 0)

  - name: Check information associated to mountpoint
    command: findmnt --fstab '/var/tmp'
    register: device_name
    failed_when: device_name.rc > 1
    changed_when: false

  - name: Create mount_info dictionary variable
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - '{{ device_name.stdout_lines[0].split() | list | lower }}'
      - '{{ device_name.stdout_lines[1].split() | list }}'
    when:
      - device_name.stdout is defined and device_name.stdout_lines is defined
      - (device_name.stdout | length > 0)

  - name: If /var/tmp not mounted, craft mount_info manually
    set_fact:
      mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
    with_together:
      - - target
        - source
        - fstype
        - options
      - - /var/tmp
        - ''
        - ''
        - defaults
    when:
      - ("--fstab" | length == 0)
      - (device_name.stdout | length == 0)

  - name: Make sure nosuid option is part of the to /var/tmp options
    set_fact:
      mount_info: '{{ mount_info | combine( {''options'':''''~mount_info.options~'',nosuid''
        }) }}'
    when:
      - mount_info is defined and "nosuid" not in mount_info.options

  - name: Ensure /var/tmp is mounted with nosuid option
    mount:
      path: /var/tmp
      src: '{{ mount_info.source }}'
      opts: '{{ mount_info.options }}'
      state: mounted
      fstype: '{{ mount_info.fstype }}'
    when:
      - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("--fstab" | length == 0)
